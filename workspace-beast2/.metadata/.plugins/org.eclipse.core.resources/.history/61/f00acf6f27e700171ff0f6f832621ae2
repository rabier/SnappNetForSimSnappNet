
/*
 * File SnAPTreeLikelihood.java
 *
 * Copyright (C) 2010 Remco Bouckaert, David Bryant remco@cs.auckland.ac.nz
 *
 * This file is part of SnAP.
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership and licensing.
 *
 * SnAP is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 *  SnAP is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with SnAP; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,
 * Boston, MA  02110-1301  USA
 */

package speciesnetwork;


import java.io.PrintStream;
import java.util.List;
import java.util.Random;

import beast.app.BeastMCMC;
import beast.core.Citation;
import beast.core.Description;
import beast.core.Distribution;
import beast.core.Input;
import beast.core.State;
import beast.core.Input.Validate;
import beast.core.parameter.IntegerParameter;
import beast.core.parameter.RealParameter;
import beast.evolution.alignment.Alignment;
import beast.evolution.alignment.Sequence;
import beast.evolution.alignment.TaxonSet;
import beast.evolution.branchratemodel.StrictClockModel;
import beast.evolution.likelihood.TreeLikelihood;
import beast.evolution.sitemodel.SiteModel;
import beast.evolution.tree.TreeInterface;
//import snap.Data;
//import snap.NodeData;
//import snap.likelihood.SnAPLikelihoodCore;


@Description("Implements a tree Likelihood Function for Single Site Sorted-sequences on a tree.") 

@Citation(value="David Bryant, Remco Bouckaert, Joseph Felsenstein, Noah Rosenberg, Arindam RoyChoudhury. Inferring Species Trees Directly from Biallelic Genetic Markers: Bypassing Gene Trees in a Full Coalescent Analysis. Mol. Biol. Evol. 29(8):1917-1932, 2012", 
	DOI="10.1016/j.ympev.2011.10.01")
public class SimpleSnAPTreeLikelihood extends Distribution {
	public Input<SnapData> m_pDataInput = new Input<SnapData>("data", "set of alignments");
//	public Input<Tree> m_pTree = new Input<Tree>("tree", "tree with phylogenetic relations");
	public final Input<Network> speciesNetworkInput =
            new Input<>("speciesNetwork", "The species network.", Validate.REQUIRED);
	
	//public SimpleSnAPTreeLikelihood() throws Exception {
		// suppress some validation rules
		//siteModelInput.setRule(Validate.OPTIONAL);
	//}
	
    
	/**
     * Calculate the log likelihood of the current state.
     *
     * @return the log likelihood.
     */
    @Override
    public double calculateLogP() {
    	
	    //CE
	    System.out.println("Je  passe dans calculateLogP de SimpleSnapTreeLikelihood.java\n");
	    //END CE;    		
	   

        final Network speciesNetwork = speciesNetworkInput.get();
        SanityChecks.checkNetworkSanity(speciesNetwork.getOrigin()); // species network should not be insane      
        final int speciesBranchCount = speciesNetwork.getBranchCount();
        System.out.println("Mon reseau contient"+ speciesBranchCount+ "branches\n");
                
        final SnapData m_pData = m_pDataInput.get();
        System.out.println("J ai recupere mes donnees!!!\n");
        System.out.println("voila le nombre de taxon!!!"+ m_pData.getTaxonCount() +"\n");
        System.out.println("voila les noms des taxons !!!"+ m_pData.getTaxaNames()+ "\n");
        
        System.out.println("voila le nombre de taxon sets!!!"+ m_pData.m_taxonsets.get().size() +"\n");
        System.out.println("Le premier taxon set est "+ m_pData.m_taxonsets.get() +"\n");
        
        List<TaxonSet> m_taxonsets=m_pData.m_taxonsets.get();
        
        System.out.println("Le premier taxon set est "+  m_taxonsets.get(0)+"\n");
        System.out.println("Le nombre de taxon dans ce set est "+  m_taxonsets.get(0).getTaxonCount() +"\n");
        System.out.println("Les noms des taxons sont "+  m_taxonsets.get(0).getTaxaNames() +"\n");
        
        System.out.println("Le deuxieme taxon set est "+  m_taxonsets.get(1)+"\n");
        System.out.println("Le troisieme taxon set est "+  m_taxonsets.get(2)+"\n");
        
        for (int k = 0; k < m_pData.getTaxonCount(); k++) { 
        	
        	System.out.println("Le " +k+ "eme taxon set est "+  m_taxonsets.get(k)+"\n");
        	System.out.println("Le Nom du set est "+ m_taxonsets.get(k).getID());
        	
        	for (int j = 0; j < m_taxonsets.get(k).getTaxonCount(); j++) { 
        		System.out.println("Le " +j+ " eme taxa du set est "+  m_taxonsets.get(k).getTaxonId(j) +"\n");
      		
        	}
        	        	
        }
        
        System.out.println("Decrivons les sequences desormais !!!\n");        
       
        List<Sequence> sequences = m_pData.sequenceInput.get();
        
        
        //List<Sequence> sequences = m_pData.m_rawData.getTaxaNames();
        
        System.out.println("Voici les noms de mes taxons " + m_pData.m_rawData.get().getTaxaNames() + "\n");
        System.out.println("Voici les nombre de taxons " + m_pData.m_rawData.get().getTaxonCount() + "\n");
        System.out.println("Voici les noms des taxons " + m_pData.m_rawData.get().getTaxaNames() + "\n");
        
        
        for (int j = 0; j < m_pData.m_rawData.get().getTaxonCount() ; j++) { 
        	System.out.println("Voici la sequence du " + j + " eme taxa" + m_pData.m_rawData.get().getSequenceAsString(m_pData.m_rawData.get().getTaxaNames().get(j))+ "\n"); 		
    	}
        
        //System.out.println("Voici la sequence du premier taxa" + m_pData.m_rawData.get().getSequenceAsString(m_pData.m_rawData.get().getTaxaNames().get(0))+ "\n");
        //System.out.println("Voici la sequence du premier taxa" + m_pData.m_rawData.get().getSequenceAsString(m_pData.m_rawData.get().getTaxaNames().get(1))+ "\n");
       
		
        
        //List<Sequence> SNPsequences = sequenceInput.get();        
        
        System.out.println("Voici la taille de ma liste de sequences " + sequences.size() + "\n");
        
        //System.out.println("Decrivons la premiere sequence du taxon " + sequences.get(0).getTaxon() + "\n");
		//System.out.println("Decrivons la premiere sequence du taxon " + sequences.get(0).getTaxon() + "\n");        
		
		//System.out.println("La voici !!! " + sequences.get(0).getData() + "\n");        		
            
        System.out.println("Voici les sequences modifiees en entree pour SNAP\n");
        
        //SNPsequences.add(SNPSequence);
        System.out.println("Voici les sequences modifiees en entree pour SNAP" + m_pData.getPatternLineagCounts(0) +"\n");       
        
        //m_pData.m_nPatternLineageCounts
        
        //m_pData.getTaxonCount();
        //SNPsequences
        //m_pData.SNPsequences;
        
        
        logP = 0.0;
        for (int i = 0; i < speciesBranchCount; i++) { // for each species network branch "i"                
        	//logP += 2;
        	System.out.println("Je suis la branche"+ i+ "\n");        	
        }	
        	
    	return logP=3;

			// correction for constant sites. If we are sampling the numbers of constant sites 
			// (stored in ascSiteCount) then we include these probabilities. Otherwise we 
			// assume that we want conditional likelihood, in which case we divide 
			// by the probability that a site is not ascertained (or more correctly,
			// subtract the log probability.
		
//			logP = m_core.computeLogLikelihood(root, u , v, 
//	    			m_nSampleSizes, 
//	    			m_data2,
//	    			coalescenceRate,
//	    			fCategoryRates, fCategoryProportions,
//	    			useCache,
//	    			m_bUsenNonPolymorphic,
//	    
    } // calculateLogLikelihood




	@Override
	public List<String> getArguments() {
		// TODO Auto-generated method stub
		return null;
	}




	@Override
	public List<String> getConditions() {
		// TODO Auto-generated method stub
		return null;
	}




	@Override
	public void sample(State state, Random random) {
		// TODO Auto-generated method stub
		
	}

    
   
	
} // class SSSTreeLikelihood
