
/*
 * File SnAPTreeLikelihood.java
 *
 * Copyright (C) 2010 Remco Bouckaert, David Bryant remco@cs.auckland.ac.nz
 *
 * This file is part of SnAP.
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership and licensing.
 *
 * SnAP is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 *  SnAP is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with SnAP; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,
 * Boston, MA  02110-1301  USA
 */

package speciesnetwork;


import java.io.PrintStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import com.sun.xml.internal.bind.v2.runtime.reflect.ListIterator;

import beast.app.BeastMCMC;
import beast.core.Citation;
import beast.core.Description;
import beast.core.Distribution;
import beast.core.Input;
import beast.core.State;
import beast.core.Input.Validate;
import beast.core.parameter.IntegerParameter;
import beast.core.parameter.RealParameter;
import beast.evolution.alignment.Alignment;
import beast.evolution.alignment.Sequence;
import beast.evolution.alignment.TaxonSet;
import beast.evolution.branchratemodel.StrictClockModel;
import beast.evolution.likelihood.TreeLikelihood;
import beast.evolution.sitemodel.SiteModel;
import beast.evolution.tree.TreeInterface;
//import snap.Data;
//import snap.NodeData;
//import snap.likelihood.SnAPLikelihoodCore;
import beast.util.Randomizer;


@Description("Implements a tree Likelihood Function for Single Site Sorted-sequences on a tree.") 

@Citation(value="David Bryant, Remco Bouckaert, Joseph Felsenstein, Noah Rosenberg, Arindam RoyChoudhury. Inferring Species Trees Directly from Biallelic Genetic Markers: Bypassing Gene Trees in a Full Coalescent Analysis. Mol. Biol. Evol. 29(8):1917-1932, 2012", 
	DOI="10.1016/j.ympev.2011.10.01")
public class SimpleSnAPTreeLikelihood extends Distribution {
	public Input<SnapData> m_pDataInput = new Input<SnapData>("data", "set of alignments");
//	public Input<Tree> m_pTree = new Input<Tree>("tree", "tree with phylogenetic relations");
	public final Input<Network> speciesNetworkInput =
            new Input<>("speciesNetwork", "The species network.", Validate.REQUIRED);
	
	public Input<RealParameter> m_pU = new Input<RealParameter>("mutationRateU", "Instantaneous rate of mutating from the 0 allele to the 1 alelle");
	public Input<RealParameter> m_pV = new Input<RealParameter>("mutationRateV", "Instantaneous rate of mutating from the 1 allele to the 0 alelle");
	public Input<RealParameter> m_pCoalescenceRate = new Input<RealParameter>("coalescenceRate", "population size parameter with one value for each node in the tree");
	
	
	//public SimpleSnAPTreeLikelihood() throws Exception {
		// suppress some validation rules
		//siteModelInput.setRule(Validate.OPTIONAL);
	//}
	
   
	
	
	/**
     * Calculate the log likelihood of the current state.
     *
     * @return the log likelihood.
	 * @throws Exception 
     */
    @Override
    public double calculateLogP() {
    	
	    //CE
	    System.out.println("Je  passe dans calculateLogP de SimpleSnapTreeLikelihood.java\n");
	    //END CE;    		
	   

        final Network speciesNetwork = speciesNetworkInput.get();
        SanityChecks.checkNetworkSanity(speciesNetwork.getOrigin()); // species network should not be insane      
        final int speciesBranchCount = speciesNetwork.getBranchCount();
        System.out.println("Mon reseau contient "+ speciesBranchCount+ " branches\n");
        
        //affichons le nom des especes du reseau
        final NetworkNode[] leafOfNetwork=speciesNetwork.getLeafNodes();
        
        for (int j = 0; j < leafOfNetwork.length; j++) { 
        System.out.println("Voici la feuille numero " + j + " de mon reseau "+ leafOfNetwork[j].getLabel() +"\n");
        }
        
        //gerons les theta
        Double[] thetaValues = new Double[speciesNetwork.getBranchCount()];        
        for (int j = 0; j < speciesNetwork.getBranchCount(); j++) { 
        	thetaValues[j] =  Randomizer.nextDouble() ;        	 
        	System.out.println("pour la branche "+ j + " Voici la valeur de theta " + thetaValues[j] + "\n");
        }                        
        //end theta...
        
        
        //////////
        System.out.printf("Detaillons ce reseau\n");//CE
        for (NetworkNode node: speciesNetwork.getAllNodes()) {
   	     System.out.printf("Je suis le noeud d id" + node.getNr() + "\n");//CE
   	     System.out.printf("Mon nom est" + node.getLabel() + "\n"); 
   	     final Integer BranchNumber = node.gammaBranchNumber;
   	     System.out.printf("voici ma branche gamma" + node.gammaBranchNumber + "\n");//CE   	     
   	 	}
        /////  
                
        
        // Handle snap data now !!!        
        final SnapData m_pData = m_pDataInput.get();
        System.out.println("J ai recupere mes donnees!!!\n");
        System.out.println("voila le nombre de taxon!!!"+ m_pData.getTaxonCount() +"\n");
        System.out.println("voila les noms des taxons !!!"+ m_pData.getTaxaNames()+ "\n");
        
        System.out.println("voila le nombre de taxon sets!!!"+ m_pData.m_taxonsets.get().size() +"\n");
        System.out.println("Le premier taxon set est "+ m_pData.m_taxonsets.get() +"\n");
        
        List<TaxonSet> m_taxonsets=m_pData.m_taxonsets.get();
        
        System.out.println("Le premier taxon set est "+  m_taxonsets.get(0)+"\n");
        System.out.println("Le nombre de taxon dans ce set est "+  m_taxonsets.get(0).getTaxonCount() +"\n");
        System.out.println("Les noms des taxons sont "+  m_taxonsets.get(0).getTaxaNames() +"\n");
        
        System.out.println("Le deuxieme taxon set est "+  m_taxonsets.get(1)+"\n");
        System.out.println("Le nombre de taxon dans ce set est "+  m_taxonsets.get(1).getTaxonCount() +"\n");
        System.out.println("Le troisieme taxon set est "+  m_taxonsets.get(2)+"\n");
        System.out.println("Le nombre de taxon dans ce set est "+  m_taxonsets.get(2).getTaxonCount() +"\n");
        
        for (int k = 0; k < m_pData.getTaxonCount(); k++) { 
        	
        	System.out.println("Le " +k+ "eme taxon set est "+  m_taxonsets.get(k)+"\n");
        	System.out.println("Le Nom du set est "+ m_taxonsets.get(k).getID());
        	
        	for (int j = 0; j < m_taxonsets.get(k).getTaxonCount(); j++) { 
        		System.out.println("Le " +j+ " eme taxa du set est "+  m_taxonsets.get(k).getTaxonId(j) +"\n");
      		
        	}
        	        	
        }
        
        System.out.println("Decrivons les sequences desormais !!!\n");        
       
        List<Sequence> sequences = m_pData.sequenceInput.get();
        
        
        //List<Sequence> sequences = m_pData.m_rawData.getTaxaNames();
        
        System.out.println("Voici les noms de mes taxons " + m_pData.m_rawData.get().getTaxaNames() + "\n");
        System.out.println("Voici les nombre de taxons " + m_pData.m_rawData.get().getTaxonCount() + "\n");
        System.out.println("Voici les noms des taxons " + m_pData.m_rawData.get().getTaxaNames() + "\n");
        
        
        for (int j = 0; j < m_pData.m_rawData.get().getTaxonCount() ; j++) { 
        	System.out.println("Voici la sequence du " + j + " eme taxa" + m_pData.m_rawData.get().getSequenceAsString(m_pData.m_rawData.get().getTaxaNames().get(j))+ "\n"); 		
    	}
        
        //System.out.println("Voici la sequence du premier taxa" + m_pData.m_rawData.get().getSequenceAsString(m_pData.m_rawData.get().getTaxaNames().get(0))+ "\n");
        //System.out.println("Voici la sequence du premier taxa" + m_pData.m_rawData.get().getSequenceAsString(m_pData.m_rawData.get().getTaxaNames().get(1))+ "\n");
       
		
        
        //List<Sequence> SNPsequences = sequenceInput.get();        
        
        System.out.println("Voici la taille de ma liste de sequences " + sequences.size() + "\n");
        
        //System.out.println("Decrivons la premiere sequence du taxon " + sequences.get(0).getTaxon() + "\n");
		//System.out.println("Decrivons la premiere sequence du taxon " + sequences.get(0).getTaxon() + "\n");        
		
		//System.out.println("La voici !!! " + sequences.get(0).getData() + "\n");        		
            
        
        // jen suis ici !!!
        System.out.println("Voici les sequences modifiees en entree pour SNAP\n");
        System.out.println("Voici le nombre de Pattern pour les donnees SNAP" + m_pData.getPatternCount() +"\n");
        
        /*
        int [] thisSite = m_pData.getPattern(0);  //count of red alleles for the site 2
        System.out.println("Voici le nombre d alleles rouges pour le site 1" + thisSite[0] +"\n"); 
        System.out.println("Voici le nombre d alleles rouges pour le site 1" + thisSite[1] +"\n");
        System.out.println("Voici le nombre d alleles rouges pour le site 1" + thisSite[2] +"\n");
        System.out.println("Reecrivons la meme chose\n"); 
        System.out.println("Voici le nombre d alleles rouges pour le site 1" + m_pData.getPattern(0)[0] +"\n");
        System.out.println("Voici le nombre d alleles rouges pour le site 1" + m_pData.getPattern(0)[1] +"\n");
        System.out.println("Voici le nombre d alleles rouges pour le site 1" + m_pData.getPattern(0)[2] +"\n");
        
        System.out.println("Voici le nombre de sites" + m_pData.getSiteCount()+ "\n");
        */
        
        System.out.println("Recapitulons le tout !\n");        
        for (int i = 0; i < m_pData.getPatternCount(); i++) {
        	for (int j = 0; j < m_pData.getNrTaxa(); j++) {
        		System.out.println("Voici le nombre d alleles rouges pour le site " + i +" et le " +j +" eme taxon " + m_pData.getPattern(i)[j] +"\n");       
        	}
        }
        		
        		
        
        //SNPsequences.add(SNPSequence);
        /*
        System.out.println("Voici les sequences modifiees en entree pour SNAP" + m_pData.getPatternLineagCounts(0)[0] +"\n"); 
        System.out.println("Voici les sequences modifiees en entree pour SNAP" + m_pData.getPatternLineagCounts(0)[1] +"\n");   
        System.out.println("Voici les sequences modifiees en entree pour SNAP" + m_pData.getPatternLineagCounts(0)[2] +"\n");
        System.out.println("Voici les sequences modifiees en entree pour SNAP" + m_pData.getPatternLineagCounts(1)[0] +"\n");
        System.out.println("Voici les sequences modifiees en entree pour SNAP" + m_pData.getPatternLineagCounts(1)[1] +"\n");   
        System.out.println("Voici les sequences modifiees en entree pour SNAP" + m_pData.getPatternLineagCounts(1)[2] +"\n");
        System.out.println("Voici les sequences modifiees en entree pour SNAP" + m_pData.getPatternLineagCounts(2)[0] +"\n");
        System.out.println("Voici les sequences modifiees en entree pour SNAP" + m_pData.getPatternLineagCounts(2)[1] +"\n");   
        System.out.println("Voici les sequences modifiees en entree pour SNAP" + m_pData.getPatternLineagCounts(2)[2] +"\n");
        */
       // System.out.println("Voici les sequences modifiees en entree pour SNAP" + m_pData.getPatternLineagCounts(1) +"\n"); 
        //m_pData.m_nPatternLineageCounts
        
        //m_pData.getTaxonCount();
        //SNPsequences
        //m_pData.SNPsequences;
        
        
        //try to handle substitution rates
        //m_siteModel = (SiteModel.Base) siteModelInput.get();
        //m_substitutionmodel = ((SnapSupublic Input<RealParameter> m_pCoalescenceRate = new Input<RealParameter>("coalescenceRate", "population size parameter with one value for each node in the tree");

        double u = m_pU.get().getValue();
        double v = m_pV.get().getValue();
        System.out.println("Voici le mutation rate u pour snap " + u + "\n");
        System.out.println("Voici le mutation rate v pour snap " + v + "\n");

        
        double gamma = m_pCoalescenceRate.get().getValue();
        System.out.println("Voici le gamma recu en entree " + gamma + "\n");
        
        
        System.out.println("Initialisation des feuilles pour la FMatrix \n");
      //essayons l initialisation des feuilles 
    	FMatrix tmpForLeaf=new FMatrix(m_taxonsets.get(0).getTaxonCount(),m_pData.getPattern(0)[0]);
    	System.out.println("tmpForLeaf correspond a " + tmpForLeaf + "\n");
      //end essayons		
    	
    	
    	//essayons l initialisation automatique de ttes les feuilles pour le site 0
              
        final FMatrix[] MyFMatrixLeaves= new FMatrix[leafOfNetwork.length];
        for (int j = 0; j < leafOfNetwork.length; j++) { 
        	MyFMatrixLeaves[j]=new FMatrix(m_taxonsets.get(j).getTaxonCount(),m_pData.getPattern(0)[j]);
            System.out.println("la F Matrix de la " + j + " eme feuille  correspond a " + MyFMatrixLeaves[j] + "\n");     	
            }       
      //end essayons
        
        
      //essayons l initialisation automatique de ttes les feuilles pour le site 1 
        final FMatrix[] MyFMatrixLeavesSite1= new FMatrix[leafOfNetwork.length];
        for (int j = 0; j < leafOfNetwork.length; j++) { 
        	MyFMatrixLeavesSite1[j]=new FMatrix(m_taxonsets.get(j).getTaxonCount(),m_pData.getPattern(1)[j]);
            System.out.println("la F Matrix Site 1 de la " + j + " eme feuille  correspond a " + MyFMatrixLeavesSite1[j] + "\n");     	
            }            
      //end essayons
        
        
       //essayons l intialisation de la FMatrix au niveau d un noeud intpublic Input<RealParameter> m_pCoalescenceRate = new Input<RealParameter>("coalescenceRate", "population size parameter with one value for each node in the tree");
    	//erne
        //final NetworkNode[] listSpeciation=new NetworkNode[speciesNetwork.getSpeciationNodeCount()];
        //listSpeciation=speciesNetwork.getSpeciationNodes();       		
        NetworkNode[] listSpeciation=speciesNetwork.getSpeciationNodes();    
        System.out.println("Mon deuxieme noeud de speciation est " + listSpeciation[1].getLabel() + "\n");
        FMatrix[] MyFMatrixSpeciationsSite1= new FMatrix[listSpeciation.length];
        MyFMatrixSpeciationsSite1[1]=new FMatrix(m_taxonsets.get(0).getTaxonCount()+m_taxonsets.get(1).getTaxonCount(),m_pData.getPattern(0)[0]);
        System.out.println("la F Matrix Site 1 de ce noued de speciation  correspond a " + MyFMatrixSpeciationsSite1[1] + "\n");       
        //end essayons
        
        
        
        logP = 0.0;
        
        //CE cela marchait avant de passer au FMatrixAugmented. Mais c est tjs interessant. KEEP IT  
        /*
        for (int i = 0; i < speciesBranchCount; i++) { // for each species network branch "i"                
        	//logP += 2;
        	System.out.println("Je suis la branche"+ i+ "\n");        	
        	
        	//essayons un 
        	FMatrix tmp2=new FMatrix(4,2);
        	try {
        		
        		System.out.println("tmp2 correspond a " + tmp2 + "\n");
        		System.out.println("tmp2 est de taille " + tmp2.getSize() + "\n");
				FMatrix tmp = MatrixExponentiator.expQTtx(4, 1, 1, 0.2, 0.2, tmp2);
				System.out.println("J ai ecrit MatrixExponentiator!!!\n");
				System.out.println("tmp est de taille" + tmp + "\n");
				System.out.println("tmp est de taille" + tmp.getSize() + "\n");
				
				System.out.println("j accede a tmp 4 2 " + tmp.get(4,2) + "\n");				
				
				System.out.println("J accede a tmp 1 0 " + tmp.get(1,0) + "\n");
				System.out.println("J accede a tmp 1 1 " + tmp.get(1,1) + "\n");
				System.out.println("J accede a tmp 2 0 " + tmp.get(2,0) + "\n");
				System.out.println("J ai fini le MatrixExponentiator pour cette branche\n");				
				
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
        	//
        	        	       	
        }	
        */
        //END CE cela marchait
        
        
        //DECLARATION
        
        // From here I try to handle FMatrixAugmented        
        FMatrixAugmented[] TableFMatAugmented = new FMatrixAugmented[speciesNetwork.getBranchCount()];        
        for (int j = 0; j < speciesNetwork.getBranchCount(); j++) { 
        	FMatrixAugmented myFMatrixAugmented= new FMatrixAugmented();
        	TableFMatAugmented[j]=myFMatrixAugmented;
        	System.out.println("J ai fini le FMatrixAugmented pour cette branche\n");		
        }
        
                
        //list of nodes
       // NetworkNode[] NetworkNodesReadyToBeTreated = new NetworkNode[nodeCount];
        ArrayList <NetworkNode>  NetworkNodesReadyToBeTreated = new ArrayList <NetworkNode>();
        final NetworkNode[] NetworkLeaves=speciesNetwork.getLeafNodes(); 
        for (int j = 0; j < NetworkLeaves.length; j++) { 
        NetworkNodesReadyToBeTreated.add(NetworkLeaves[j]);
        }        
        System.out.println("Voici ma liste de noeuds ready to be treated\n");	
        System.out.println(NetworkNodesReadyToBeTreated + "\n");  
        
        ArrayList <NetworkNode>  NetworkNodesNotReadyToBeTreated = new ArrayList <NetworkNode>();
        final NetworkNode[] NetworkInternalNodes=speciesNetwork.getInternalNodes(); 
        for (int j = 0; j < NetworkInternalNodes.length; j++) { 
            NetworkNodesNotReadyToBeTreated.add(NetworkInternalNodes[j]);
            }         
        System.out.println("Voici ma liste de noeuds NOT ready to be treated\n");	
//      System.out.println(NetworkNodesNotReadyToBeTreated + "\n");
             
        // création d'un listIterator sur cette liste
        java.util.ListIterator<NetworkNode> it = NetworkNodesNotReadyToBeTreated.listIterator() ;
        while(it.hasNext()) {
            // on ajoute un élément supplémentaire après chaque
            // élément de la liste
        	NetworkNode element = it.next() ;
        	System.out.println(element.getLabel() +" ");
        }
        System.out.println("\n");
       
        //END DECLARATION
        
        
        
        
        
       //init FMatrixAugmented for the leaves of the network     
        for (int j = 0; j < NetworkLeaves.length; j++) { 
        	FMatrixAugmented myFMatrixAugmented= new FMatrixAugmented(m_taxonsets.get(j).getTaxonCount(),m_pData.getPattern(0)[j]);
        	//0 refers to the id of the site 	
        	TableFMatAugmented[NetworkLeaves[j].gammaBranchNumber]=myFMatrixAugmented;    	
        }        
         
        
        //let us update FMatrixAugmented for the leaves by going at the top of their branches
        for (int j = 0; j < NetworkLeaves.length; j++) {         	
        	//0 refers to the id of the site 	
        	try {
        		NetworkNode Parent = NetworkLeaves[j].getParentByBranch(NetworkLeaves[j].gammaBranchNumber);	
				TableFMatAugmented[NetworkLeaves[j].gammaBranchNumber]= MatrixExponentiator.expQTtx(TableFMatAugmented[NetworkLeaves[j].gammaBranchNumber].getSize(), u, v, gamma, Parent.getHeight(), TableFMatAugmented[NetworkLeaves[j].gammaBranchNumber]);
				System.out.printf("Je gere la  TableFMatAugmented dela branche numero" + NetworkLeaves[j].gammaBranchNumber + "\n"); 				
				System.out.printf("la hauteur de ma branche feuille est" + Parent.getHeight() + "\n");
				
        	} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			};    	
        }     
          
        
        
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        
        
        
        
        //init FMatrixAugmented for the speciation nodes of the network 
        NetworkNode[] NetworkSpeciationNodes=speciesNetwork.getSpeciationNodes(); 
        for (int j = 0; j < NetworkSpeciationNodes.length; j++) { 
        	FMatrixAugmented myFMatrixAugmented=new FMatrixAugmented(m_taxonsets.get(0).getTaxonCount()+m_taxonsets.get(1).getTaxonCount(),m_pData.getPattern(0)[0]);
        	TableFMatAugmented[NetworkSpeciationNodes[j].gammaBranchNumber]=myFMatrixAugmented;             	
        }        
  
        //init FMatrixAugmented for the reticulation nodes of the network 
        NetworkNode[] NetworkReticulationNodes=speciesNetwork.getReticulationNodes();
        for (int j = 0; j < NetworkReticulationNodes.length; j++) { 
        	FMatrixAugmented myFMatrixAugmented=new FMatrixAugmented();
        	TableFMatAugmented[NetworkReticulationNodes[j].gammaBranchNumber]=myFMatrixAugmented; 
        	FMatrixAugmented myFMatrixAugmentedBis=new FMatrixAugmented();
        	TableFMatAugmented[NetworkReticulationNodes[j].gammaBranchNumber+1]=myFMatrixAugmentedBis;  
        }
        
        
        //try to print out all the FMatrixAugmented
        for (NetworkNode node: speciesNetwork.getAllNodesExceptOrigin()) {
      	     System.out.printf("Je suis le noeud d id" + node.getNr() + "\n"); 
      	     System.out.printf("Mon nom est" + node.getLabel() + "\n"); 
      	     final Integer BranchNumber = node.gammaBranchNumber;
      	     System.out.printf("voici ma branche gamma" + node.gammaBranchNumber + "\n");      	     
      	     System.out.printf("voici ma TableFMatAugmented " + TableFMatAugmented[BranchNumber] + "\n"); 
      	 	
        }
        
         // faut il une Fmatrix pour lorigine???
        
        
        
        	
    	return logP=3;

			// correction for constant sites. If we are sampling the numbers of constant sites 
			// (stored in ascSiteCount) then we include these probabilities. Otherwise we 
			// assume that we want conditional likelihood, in which case we divide 
			// by the probability that a site is not ascertained (or more correctly,
			// subtract the log probability.
		
//			logP = m_core.computeLogLikelihood(root, u , v, 
//	    			m_nSampleSizes, 
//	    			m_data2,
//	    			coalescenceRate,
//	    			fCategoryRates, fCategoryProportions,
//	    			useCache,
//	    			m_bUsenNonPolymorphic,
//	    
    } // calculateLogLikelihood




	@Override
	public List<String> getArguments() {
		// TODO Auto-generated method stub
		return null;
	}




	@Override
	public List<String> getConditions() {
		// TODO Auto-generated method stub
		return null;
	}




	@Override
	public void sample(State state, Random random) {
		// TODO Auto-generated method stub
		
	}

    
   
	
} // class SSSTreeLikelihood
