
/*
 * File SnAPTreeLikelihood.java
 *
 * Copyright (C) 2010 Remco Bouckaert, David Bryant remco@cs.auckland.ac.nz
 *
 * This file is part of SnAP.
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership and licensing.
 *
 * SnAP is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 *  SnAP is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with SnAP; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,
 * Boston, MA  02110-1301  USA
 */


// analogue to SimpleSnAPTreeLikelihood but more general !


package speciesnetworkBIS;


import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

import javax.xml.bind.JAXBException;

import org.xml.sax.SAXException;

import com.google.common.collect.Multiset;
import com.sun.xml.internal.bind.v2.runtime.reflect.ListIterator;

import beast.app.BeastMCMC;
import beast.core.Citation;
import beast.core.Description;
import beast.core.Distribution;
import beast.core.Input;
import beast.core.State;
import beast.core.Input.Validate;
import beast.core.parameter.IntegerParameter;
import beast.core.parameter.RealParameter;
import beast.core.util.Log;
import beast.evolution.alignment.Alignment;
import beast.evolution.alignment.Sequence;
import beast.evolution.alignment.TaxonSet;
import beast.evolution.branchratemodel.StrictClockModel;
import beast.evolution.likelihood.TreeLikelihood;
import beast.evolution.sitemodel.SiteModel;
import beast.evolution.tree.TreeInterface;
//import snap.Data;
//import snap.NodeData;
//import snap.likelihood.SnAPLikelihoodCore;
import beast.util.Randomizer;
import speciesnetworkBIS.SnapData;
import snaplikelihood.SnapSubstitutionModelESSAI;

@Description("Implements a tree Likelihood Function for Single Site Sorted-sequences on a tree.") 

@Citation(value="David Bryant, Remco Bouckaert, Joseph Felsenstein, Noah Rosenberg, Arindam RoyChoudhury. Inferring Species Trees Directly from Biallelic Genetic Markers: Bypassing Gene Trees in a Full Coalescent Analysis. Mol. Biol. Evol. 29(8):1917-1932, 2012", 
	DOI="10.1016/j.ympev.2011.10.01")
//public class SnAPTreeLikelihoodGH extends Distribution {
public class SnAPTreeLikelihoodGH extends TreeLikelihood  {
// public Input<SnapData> m_pDataInput = new Input<SnapData>("data", "set of alignments");
//	public Input<Tree> m_pTree = new Input<Tree>("tree", "tree with phylogenetic relations");
	public final Input<Network> speciesNetworkInput =
            new Input<>("speciesNetwork", "The species network.", Validate.REQUIRED);
	
	//public Input<RealParameter> m_pCoalescenceRate = new Input<RealParameter>("coalescenceRate", "population size parameter with one value for each node in the tree");
	public Input<Boolean> m_usenNonPolymorphic = new Input<Boolean>("non-polymorphic", 
			"Check box only if constant sites have been left in the data and are to be included in the likelihood calculation. " +
			"Leave unchecked if all but the variable sites have been removed.",
			//"Whether to use non-polymorphic data in the sequences. " +
			//"If true (default), constant-sites in the data will be used as part of the likelihood calculation. " +
			//"If false , constant sites will be removed from the sequence data and a normalization factor is " +
			//"calculated for the likelihood.", 
			true);
	public Input<IntegerParameter> ascSiteCountInput = new Input<IntegerParameter>("ascSiteCount", "Counts for number of ascertained sites");
	public Input<Boolean> useLogLikelihoodCorrection = new Input<Boolean>("useLogLikelihoodCorrection", "use correction of log likelihood for the purpose of calculating " +
			"Bayes factors for different species assignments. There is (almost) no computational cost involved for the MCMC chain, but the log likelihood " +
			"might be reported as positive number with this correction since the likelihood is not a proper likelihood any more.", false);
	
	
	// At this time, i have not handled ascSiteCount
	
	
	//public SimpleSnAPTreeLikelihood() throws Exception {
		// suppress some validation rules
		//siteModelInput.setRule(Validate.OPTIONAL);
	//}
	
   
	
	/** some variable for shadowing inputs **/
	boolean m_bUsenNonPolymorphic;  //true if we use nonPolymorphic sites
	//boolean m_bMutationOnlyAtRoot;
	//boolean m_bHasDominantMarkers;
	
	int numPatterns=0; //will contain the number of patterns (all the sites are summed up in patterns)
	double [] patternProbs; //will contain the likelihood for all sites summed up in patterns
	
	
	
	/** shadow variable of m_pData input */
	SnapData m_pData; //the data
	
	
	Network speciesNetwork=null;
	
	double m_fP0 = 0.0, m_fP1 = 0.0;
	double ascLogP = Double.NaN;
	
	// Correction so that the returned value is a likelihood instead
	// of a sufficient statistic for the likelihood
	double m_fLogLikelihoodCorrection = 0;
	// Sampled parameter equal to the number of sites which have been removed from the data during ascertainment
	IntegerParameter ascSiteCount;
	SnapSubstitutionModelESSAI m_substitutionmodel;
		
	
	@Override
	public void initAndValidate() {
		
		Log.debug.println("Je passe ds la phase d initialisation de SnapTreeLikelihoodGH\n");     
		
		if (!(dataInput.get() instanceof SnapData)) {
    		throw new IllegalArgumentException("The data input should be a snapData object");
		}
		if (dataInput.get().getTaxonCount() != treeInput.get().getLeafNodeCount()) {
    		throw new IllegalArgumentException("The number of leaves in the tree does not match the number of sequences");
		}
		
		
		
		// CE j essaie quelque chose !!!!	
		m_pData=(SnapData) dataInput.get();
		
		speciesNetwork = speciesNetworkInput.get();
		
        
        //CE I am adding this line to see if it is useful, but we are not using it
    		TreeInterface tree = treeInput.get();
        
        m_siteModel = (SiteModel.Base) siteModelInput.get();
        m_substitutionmodel = ((SnapSubstitutionModelESSAI)m_siteModel.substModelInput.get());
    	
		//CE
	    Log.debug.println("Je suis juste avant que cela plante\n");
		RealParameter coalescenceRatenput = m_substitutionmodel.m_pCoalescenceRate.get();
		Log.debug.println("Je suis juste apres le plantage\n");
        //Input<RealParameter> coalescenceRatenput = m_substitutionmodel.m_pCoalescenceRate;
        //Double sValues = coalescenceRatenput.get().getValue();
		Double sValues = coalescenceRatenput.getValue();
        
        String sCoalescenceRateValues = "";
        Double[] values = new Double[speciesNetwork.getBranchCount()];
    	
    		Log.debug.println("Voici les sValues" + sValues + "\n");
        for (int i = 0; i < values.length; i++) {
                   	
            values[i] = new Double(sValues);                      
            Log.debug.println("Voici i" + i + "\n");
            Log.debug.println("Voici la valeur de values" + values[i] + "\n");
			sCoalescenceRateValues += values[i] + " ";
        }
                
				
		//RealParameter coalescenceRate = new RealParameter();
        //RealParameter coalescenceRate = new RealParameter(); 
        RealParameter coalescenceRate = new RealParameter();
        coalescenceRate.initByName("value", sCoalescenceRateValues, "upper", 10.0, "lower", 0.0, "dimension", values.length);
        coalescenceRate.setID(coalescenceRatenput.getID());		
        coalescenceRatenput.assignFrom(coalescenceRate);    	
        
        Log.debug.println("Voici coalescenceRate ds la phase d initialisation" + coalescenceRate + "\n");
        
		//END CE
	
		Log.debug.println("J ai fini la phase d initialisation de SnapTreeLikelihoodGH\n");
	}
	
	

	
		
	/**
     * Calculate the log likelihood of the current state.
     *
     * @return the log likelihood.
	 * @throws Exception 
     */
    @Override
    public double calculateLogP()  {
    	
	    //CE
	    Log.debug.println("Je  passe dans calculateLogP de  SnapTreeLikelihoodGH.java\n");
	    //END CE;    			          
	    //speciesNetwork = speciesNetworkInput.get();
	    
	    SanityChecks.checkNetworkSanity(speciesNetwork.getOrigin()); // species network should not be insane      
        final int speciesBranchCount = speciesNetwork.getBranchCount();
        Log.debug.println("Mon reseau contient "+ speciesBranchCount+ " branches\n");       
        
        // Handle snap data now , CE je lai mis ds initand Validate desormais!!!               
       // m_pData = m_pDataInput.get();
        
       // List<TaxonSet> m_taxonsets=m_pData.m_taxonsets.get();        
       

    		double u = m_substitutionmodel.m_pU.get().getValue();
    		double v  = m_substitutionmodel.m_pV.get().getValue();
        
        Log.debug.println("Voici le mutation rate u pour snap " + u + "\n");
        Log.debug.println("Voici le mutation rate v pour snap " + v + "\n");
                       
        /*
        System.out.println("Voici le m_pCoalescenceRate" + m_pCoalescenceRate.get().getValue()  + "\n");              
        
        double gamma = m_pCoalescenceRate.get().getValue();
        System.out.println("Voici le gamma recu en entree " + gamma + "\n");             
        */       
        RealParameter  MyCoal = m_substitutionmodel.m_pCoalescenceRate.get();
        Double [] coalescenceRate = MyCoal.getValues();

		//NEW VERSION		
 
        //FIX IT : be careful there won t be a coalescent rate for the branch above origin   
        
		for (int j = 0; j < coalescenceRate.length; j++) {    	 
        	Log.debug.println("pour la branche "+ j + " Voici la valeur du coalescent rate, ie le gamma " + coalescenceRate[j] + "\n");
        }  
		
		
		//END NEW VERSION       
      
        //DECLARATION
              
        ////////// AFFICHAGE DU RESEAU (JUST FOR CHECKING)
        Log.debug.printf("Detaillons ce reseau\n");//CE
        for (NetworkNode node: speciesNetwork.getAllNodes()) {
   	     Log.debug.printf("Je suis le noeud d id" + node.getNr() + "\n");//CE
   	     Log.debug.printf("Mon nom est" + node.getLabel() + "\n"); 
   	     final Integer BranchNumber = node.gammaBranchNumber;
   	     Log.debug.printf("voici ma branche gamma" + node.gammaBranchNumber + "\n");//CE   
   	     Log.debug.printf("voici ma hauteur" + node.getHeight() + "\n");
   	     
   	     	Log.debug.printf("J ai" + node.getParents().size() + "parents \n");
   	     	for (NetworkNode nodeParent: node.getParents()){
   	     		Log.debug.printf("Je suis le parent id" + nodeParent.getNr() + "\n");//CE
   	     		Log.debug.printf("Mon nom est" + nodeParent.getLabel() + "\n"); 	     		
   	     	}
   	     	
   	     	Log.debug.printf("Sinon, J ai" + node.getChildCount() + "enfants \n");
	     	for (NetworkNode nodeChild: node.getChildren()){
	     		Log.debug.printf("Je suis l enfant id" + nodeChild.getNr() + "\n");//CE
	     		Log.debug.printf("Mon nom est" + nodeChild.getLabel() + "\n"); 	     		
	     	}
   	     
   	     
   	 	}
        /////  END AFFICHAGE
        
       
        SnAPLikelihoodCoreGH m_core= new SnAPLikelihoodCoreGH(speciesNetwork,m_pData);
   
        
        try {
        	patternProbs=m_core.computeLogLikelihood(m_pData, speciesNetwork, u, v, coalescenceRate);       	
        	
        	//compute likelihood for all sites summed up in patterns
			Log.debug.println("j ai fini m_core.computeLogLikelihood\n");
			
			//CE see if it is correct
			m_core=null;
			//END CE
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
         
        
        
        // in our case we only have one category!!!		 
		
		// FIXIT : 
        //why does he consider everal categories??
		//add correction for constant sites , cf. Bryant code !!!
		//END FIX IT		
		
        
        // calculate log prob      
     	logP = 0.0;
     	m_bUsenNonPolymorphic = m_usenNonPolymorphic.get();
   	
     	numPatterns = m_pData.getPatternCount();
     	for(int id = 0; id < numPatterns - (m_bUsenNonPolymorphic ? 0 : 2); id++) {
     		
     		double freq = m_pData.getPatternWeight(id);    
     		Log.debug.println("Je suis le pattern "+ id + "\n");	     		
     		Log.debug.println("Voici ma valeur de freq "+ freq + "\n");
     		double siteL = patternProbs[id];
     		if (siteL==0.0) {
     			logP = -10e100;
     			break;
     		}
     		logP += (double)freq * Math.log(siteL);
     	}
      
     	
     	// correction for constant sites. If we are sampling the numbers of constant sites 
     	// (stored in ascSiteCount) then we include these probabilities. Otherwise we 
     	// assume that we want conditional likelihood, in which case we divide 
     	// by the probability that a site is not ascertained (or more correctly,
     	// subtract the log probability.
     	if (!m_bUsenNonPolymorphic) {
     				m_fP0 =  patternProbs[numPatterns - 2];
     				m_fP1 =  patternProbs[numPatterns - 1];
     				if (ascSiteCount != null) {   
     					ascLogP = (double)ascSiteCount.getValue(0) * Math.log(m_fP0) +
     							  (double)ascSiteCount.getValue(1) * Math.log(m_fP1);
     					logP += ascLogP;
     				} else {
     					logP -= (double) m_pData.getSiteCount() * Math.log(1.0 - m_fP0 - m_fP1);
     				}
     			}		
     	
 	
     	////////////////////////////////////
    	// calculate Likelihood Correction. 
		// When the assignment of individuals to populations/species is fixed, the allele counts in each population are sufficient 
		// statistics for the species tree parameters. However when testing species assignments this is no longer the case.
		// To address this we multiply the likelihood computed from allele counts by the probability of observing
		// the given sequences given those allele counts (and the species assignments).
		m_fLogLikelihoodCorrection = 0;
		if (useLogLikelihoodCorrection.get()) {
			// RRB: note that increasing the number of constant sites
			// does not change the m_fLogLikelihoodCorrection since the
			// contribution of constant sites is zero. This means,
			// m_fLogLikelihoodCorrection does not need to be recalculated
			// when ascSiteCount changes.
			// DJB: This is true, but only until we start looking at non-constant sites being ascertained.
	    	for (int i = 0; i < numPatterns; i++) {
	            int [] thisSite = m_pData.getPattern(i);  //count of red alleles for this site
	            int [] lineageCounts = m_pData.getPatternLineagCounts(i); //count of total lineages for this site
	            for (int j = 0; j < thisSite.length; j++) {
	            	m_fLogLikelihoodCorrection -= logBinom(thisSite[j], lineageCounts[j]) * m_pData.getPatternWeight(i);
	            }
	    	}
    	}		
		
		//Vincent asked to remove this line  (it was included in Bryant's code !!!)
		//System.err.println("Log Likelihood Correction = " + m_fLogLikelihoodCorrection);
     	// end Vincent
		
		
		if (useLogLikelihoodCorrection.get()) {
			logP += m_fLogLikelihoodCorrection;
		}
		
    		  	
	    ////////////////////////////////////	
		Log.debug.println("La log likelihood est egale a"+ logP + "\n");	
		
    	return logP;

  	
    	
    }// calculateLogLikelihood

 
    private double logBinom(int k, int n) {
    	double f = 0;
    	for (int i = k + 1; i <= n; i++) {
    		f += Math.log(i) - Math.log(n - i + 1);
    	}
		return f;
	}

	@Override
	public List<String> getArguments() {
		// TODO Auto-generated method stub
		return null;
	}


	@Override
	public List<String> getConditions() {
		// TODO Auto-generated method stub
		return null;
	}




	@Override
	public void sample(State state, Random random) {
		// TODO Auto-generated method stub
		
	}
    
	 /** CalculationNode methods **/
	//CE I am trying to readd these two methods, because I removed it before ...
		@Override
		public void store() {
	        storedLogP = logP;
	  
	    }
		
		@Override
	    public void restore() {
	        logP = storedLogP;	    
	    }

	


} // class SSSTreeLikelihood
