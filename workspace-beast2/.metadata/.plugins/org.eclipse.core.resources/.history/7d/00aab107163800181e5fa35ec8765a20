package speciesnetwork;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import com.google.common.collect.Multiset;

import beast.evolution.alignment.TaxonSet;
import matrix.QMatrix;


public class SiteProbabilityCalculatorGH {

	FMatrixAugmented[] tableFMatAugmented;
	ArrayList<NetworkNode>  networkNodesReadyToBeTreated;
	ArrayList<NetworkNode>  networkNodesNotReadyToBeTreated;
	
	public SiteProbabilityCalculatorGH(Network speciesNetwork) {    	    	     

		tableFMatAugmented = new FMatrixAugmented[speciesNetwork.getBranchCount()];
      	networkNodesReadyToBeTreated = new ArrayList <NetworkNode>();
		networkNodesNotReadyToBeTreated = new ArrayList <NetworkNode>();
		
		//
		// We will see if we need this later
        for (int j = 0; j < speciesNetwork.getBranchCount(); j++) {         	
        	tableFMatAugmented[j]= new FMatrixAugmented();
        }
		//
		
				
		  //Initialization of List of Nodes Ready to Be treated and
        //and also the list of nodes not Ready to Be treated       
        //Initialization of lists of Nodes Ready to Be treated 
        // i.e. only the leaves are ready to be treated !!!  
		final NetworkNode[] networkLeaves=speciesNetwork.getLeafNodes();       
        for (int j = 0; j < networkLeaves.length; j++) { 
        networkNodesReadyToBeTreated.add(networkLeaves[j]);
        }    
		
        //Initialization of  List of Nodes Not Ready to Be treated 
        // i.e. all the internal nodes are Not ready to be treated !!!     
        final NetworkNode[] networkInternalNodes=speciesNetwork.getInternalNodes(); 
        for (int j = 0; j < networkInternalNodes.length; j++) { 
            networkNodesNotReadyToBeTreated.add(networkInternalNodes[j]);
            }         
        
        //let us print theNodesReadyToBeTreated and theNodesNotReadyToBeTreated
      
		//	this.printListNodes(networkNodesReadyToBeTreated.listIterator(),true);
		//	this.printListNodes(networkNodesNotReadyToBeTreated.listIterator(),false) ;  
			
	
	}
	
	

	public void printListNodes(java.util.ListIterator<NetworkNode> listIterator, boolean ready) { //throws SAXException, JAXBException {
    	
    	if (ready==true) {
    	 System.out.println("AWESOME !!! Voici ma liste de noeuds ready !!!\n");}
    	else {
    		System.out.println("BOUHHHHHH !!! Voici ma liste de noeuds not ready  !!!\n");}            

         NetworkNode myNode;
         while(listIterator.hasNext()) {
         	myNode = listIterator.next() ;
         	System.out.println(myNode.getLabel() +" ");
         }
         System.out.println("\n");
        
    	
    }
	

	
	
	public double computeSiteLikelihood(int [] dataAtThisSite, List<TaxonSet> taxonSets, Network speciesNetwork, double u, double v, 
            Double [] coalescenceRate) throws Exception {
		
						
		leafLikelihood(dataAtThisSite, taxonSets, u, v, coalescenceRate); //handle leaves branches and go to Top on those branches
		UpdateListNodesReadyOrNot(speciesNetwork); //update the lists
		
		
        while (!networkNodesReadyToBeTreated.isEmpty()){
        	
        	NetworkNode nodeReady = networkNodesReadyToBeTreated.listIterator().next() ; 
        	//System.out.println("Je traite le noeud (ready)" + nodeReady.getLabel() + "\n");
        	       	
        	if (nodeReady.isReticulation()) {
        		
        	  //case (3*), handle reticulation node
        		//System.out.println("Je traite le cas 3* !!!\n");
        		reticulateLikelihood(nodeReady, u, v, coalescenceRate);       		
        		updateReticulate(nodeReady); //update the nodes to be treated or not, and also FMatrix
        		
        	}else if (nodeReady.getChildCount()>1) {
        		//case (2*) or (4*), i.e. Handle internal node which is not reticulation node, and that have at least 2 children !!!
        		
        		FMatrixAugmented FMatChild1=tableFMatAugmented[nodeReady.childBranchNumbers.get(0)]; 
    	        FMatrixAugmented FMatChild2=tableFMatAugmented[nodeReady.childBranchNumbers.get(1)]; 
    	         
        		if  (!FMatChild1.compare(FMatChild2)) {
        			//case (2*), since the FMatrices of the edges below are different
        			//System.out.println("Je traite le cas 2* !!!\n");
        			
        			internalLikelihoodTwoDifferentChildren(nodeReady, FMatChild1, FMatChild2,
        					u, v, coalescenceRate);
        			
        			updateInternalLikTwoDiffChildren(nodeReady); 
        			
        		}else {
        			//case (4*), since the FMatrices of the edges below are equal, ie. FMatChild1=FMatChild2
        			//System.out.println("Je traite le cas 4* !!!\n");
        			
        			internalLikelihoodTwins(nodeReady, FMatChild1,  u, v, coalescenceRate);
        			updateInternalLikTwins(nodeReady); 
        			
        		}
        		
        		
        	}
        	   	
        	
        }
		
        
        //need to handle the root        
        int branchRoot=speciesNetwork.getRoot().gammaBranchNumber;
        FMatrixAugmented rootFMatrix=tableFMatAugmented[branchRoot];
    	double likelihoodSite=0;
    	try {
			likelihoodSite=doRootLikelihood(rootFMatrix, u, v, coalescenceRate[branchRoot], false);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        
		return likelihoodSite;
		
	}
	
	
	
	public void leafLikelihood(int [] dataAtThisSite, List<TaxonSet> taxonSets, double u, double v, Double [] coalescenceRate) {
		//compute likelihood for leaves branches, and go to Top of those branches
		
		
		//handle leaves since leaves are ready to be treated
		//we are at bottom of these branches
		for (int j = 0; j < networkNodesReadyToBeTreated.size(); j++) {        
        	
        	//System.out.println("Je passe ici, step 222 !!!!! \n");
        	
        	
        	NetworkNode myNodeToTreat=networkNodesReadyToBeTreated.get(j);
        	//look for taxonset with same label as NetworkLeaves[j]
        	for (int i = 0; i < taxonSets.size(); i++) {         		
        		if (taxonSets.get(i).getID().equals(myNodeToTreat.getLabel())){ 	
        			
        			/*
        			System.out.println("voici taxonSets.get(i).getTaxonCount()" + taxonSets.get(i).getTaxonCount() + "\n");
        			System.out.println("voici dataAtThisSite[i]" + dataAtThisSite[i] + "\n");
        			System.out.println("voici myNodeToTreat.gammaBranchNumber " + myNodeToTreat.gammaBranchNumber + "\n");	        				
        				*/        			
        			
        			//CE a remettre
        			//tableFMatAugmented[myNodeToTreat.gammaBranchNumber]= new FMatrixAugmented(taxonSets.get(i).getTaxonCount(),
        				//	dataAtThisSite[i]);  
        			//END CE
        			tableFMatAugmented[myNodeToTreat.gammaBranchNumber]= new FMatrixAugmented(3,
        					dataAtThisSite[i]);
        			
      			        		}
        		
        	}
        	       	
        	tableFMatAugmented[myNodeToTreat.gammaBranchNumber].addBranchNumbersAndLocations(myNodeToTreat.gammaBranchNumber,"B");    	
        	//print it !!!
        	/*
        	System.out.println("Voici la   matrice F associee a ma FMatrixAugmented " );
        	double [] theFBot=tableFMatAugmented[myNodeToTreat.gammaBranchNumber].getF();        
        	for (int k = 0; k < theFBot.length; k++) { 
        		System.out.println(theFBot[k] + " ; ");	        	
        	} 
        	*/
        	//end print it
        	
        	//System.out.println("\n\n");	 
        }                 
        
		 //Go to Top Of those branches
        //System.out.println("Let us go to TOP for leaves !!!\n");
    	// let s move to the Top on those branches          
        //So let us update FMatrixAugmented for the leaves by going at the top of their branches
        for (int j = 0; j < networkNodesReadyToBeTreated.size(); j++) {         	
        	
        	try {         					
        		NetworkNode myNodeToTreat=networkNodesReadyToBeTreated.get(j);
				double heightBranch=myNodeToTreat.getParentByBranch(myNodeToTreat.gammaBranchNumber).getHeight();        						
        		tableFMatAugmented[myNodeToTreat.gammaBranchNumber].goToTopLeaf(u, v, coalescenceRate[myNodeToTreat.gammaBranchNumber], heightBranch);
        		
        		//System.out.println("je viens de faire B-> T de l'arete "+myNodeToTreat.gammaBranchNumber+"pr feuille "+myNodeToTreat.getLabel());
			        	//try to print it !!!
        		/*
	        	double [] theFTop=tableFMatAugmented[myNodeToTreat.gammaBranchNumber].getF();
	        	System.out.println("Voici la   matrice F associee a ma FMatrixAugmented " );
	        	for (int k = 0; k < theFTop.length; k++) { 
	        		System.out.println(theFTop[k] + " ; ");	        	
	        	}
	        	*/
	        	//end print it
	        	
	        	//System.out.println("\n\n");	 
        	} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			};    	
        }          

    
		
	}

	
	
	
	
	public void UpdateListNodesReadyOrNot(Network speciesNetwork) {		
		//remove all the elements (i.e. the leaves) from the list of nodes ready to be treated
        networkNodesReadyToBeTreated.clear();
        
        //fill the list of nodes ready with internal nodes for which leaves have been treated
		
        //System.out.println("STEP 3!!!\n");	
        int countChildLeaves;
    	int count;        
    	Multiset<NetworkNode> children;
    	final NetworkNode[] networkInternalNodes=speciesNetwork.getInternalNodes(); 
    	
        for (int j = 0; j < networkInternalNodes.length; j++) {                 	       	        	
        	//Multiset<NetworkNode> children=NetworkSpeciationNodes[j].getChildren(); 
        	children=networkInternalNodes[j].getChildren(); 
        	countChildLeaves=0;
        	count=0;
        	for (NetworkNode n: children) {        		
        		count = n.isLeaf() ? 1 : 0;       		
        		countChildLeaves=countChildLeaves + count;        		
        	}        		
        	       	
        	if ( countChildLeaves==children.size() ) {
        		//the speciation node is ready to be treated
        		networkNodesReadyToBeTreated.add(networkInternalNodes[j]);       		
        		//remove this node from the list NetworkNodesNotReadyToBeTreated
        		networkNodesNotReadyToBeTreated.remove(networkInternalNodes[j]);
        	} 
        	        	
        } 	        	
        
      
       
	//		this.printListNodes(networkNodesReadyToBeTreated.listIterator(),true);
	//		this.printListNodes(networkNodesNotReadyToBeTreated.listIterator(),false) ;  
	
        
	}
		
		
		
	
	public void reticulateLikelihood(NetworkNode nodeReady, double u, double v, Double [] coalescenceRate) {
		//compute likelihood at the Top of the two branches above retic node 

		 //System.out.println("Handling case 3*!!!!!!\n");	         		
		 int belowReticBranchNumber=0;        		 
		 int lBranchNumber = nodeReady.gammaBranchNumber;            	 
		 Multiset<NetworkNode> reticChild = nodeReady.getChildren();          	 
		 for (NetworkNode n: reticChild) {        		
   		 //use for because of Multiset<NetworkNode> 
    		belowReticBranchNumber = n.gammaBranchNumber;      		        		
		 }        
   	
		 //start with right branch
		 int rBranchNumber=lBranchNumber+1;
		// work with right branch number in order to fill in F with Matrix Exponentiator
		 //tableFMatAugmented[rBranchNumber]=new FMatrixAugmented(tableFMatAugmented[belowReticBranchNumber], lBranchNumber, belowReticBranchNumber,
			//	 nodeReady.inheritProb); // version that do not fill extra dimension
		 tableFMatAugmented[rBranchNumber]=new FMatrixAugmented(tableFMatAugmented[belowReticBranchNumber], lBranchNumber, belowReticBranchNumber,
				 nodeReady.inheritProb); // version that fill extra dimension
		 
		 // Let us go to TOP on the right side    	
		 double heightBranch=nodeReady.getParentByBranch(rBranchNumber).getHeight() - nodeReady.getHeight();     
		 //System.out.println("Voici la taille de ma branche right" + heightBranch + "\n");
		 
		 tableFMatAugmented[rBranchNumber].goToBotTopRetic(u, v, coalescenceRate[rBranchNumber], heightBranch);
		 //System.out.println(" Bot -> Top sur l arete right " + rBranchNumber);
   	
		 // Let us go to TOP on the left side            	
		 heightBranch=nodeReady.getParentByBranch(lBranchNumber).getHeight() - nodeReady.getHeight();  
   	
		 //System.out.println("Voici la taille de ma branche left" + heightBranch + "\n");
		 //System.out.println(" Bot -> Top sur l arete left " + lBranchNumber);           	       	
		 tableFMatAugmented[rBranchNumber].goToTopTopRetic(u, v, coalescenceRate[lBranchNumber], heightBranch);
   	           	
		 //PRINT F 
		 //REMOVE IT when bugs fixed !!!
		 /*
		 
		 //if (nodeReady.getLabel().equals("#H2")) { //if we want to print out only a given retic node
			 double [] theF=tableFMatAugmented[rBranchNumber].getF();
			 System.out.println("HIHI " );
			 System.out.println("Voici les plus gros elements de ma   matrice F associee a ma FMatrixAugmented TopTopRetic (I am at the top top of the branches above retic)" );
						 
			 for (int k = 0; k < theF.length; k++) { 
				 if (theF[k]>0.000001){
				 System.out.println(theF[k] + " ; ");}	        	
			 }	
				
		 //}
		 */
		//END PRINT F
		 
		 /*
		 System.out.println("Let us Clone the Fmatrix rbranch \n");
		 // will see later if we need to clone them !!!
		 for (int i : tableFMatAugmented[rBranchNumber].branchNumbers) {   		
			 System.out.println("Voici i" + i +"\n");
			 if (i!=rBranchNumber) {
				 System.out.println( i + "est different de" + rBranchNumber + "\n");
				 System.out.println("donc je clone\n");
				 tableFMatAugmented[i]=tableFMatAugmented[rBranchNumber].getClone();}		  		        		  		
		 }
	      		 */
		
	}
		
	
		
	public void updateReticulate(NetworkNode nodeReady){
		//let us update the Fmatrices and the list of Nodes
		
		 int lBranchNumber=nodeReady.gammaBranchNumber;
		 int rBranchNumber=lBranchNumber + 1;
				
		 System.out.println("Let us Clone the Fmatrix rbranch \n");
		 // will see later if we need to clone them !!!
		 for (int i : tableFMatAugmented[rBranchNumber].branchNumbers) {   	
			 //System.out.println("Voici i" + i +"\n");
			 if (i!=rBranchNumber) {
				 //System.out.println( i + "est different de" + rBranchNumber + "\n");
				 //System.out.println("donc je clone\n");
				 tableFMatAugmented[i]=tableFMatAugmented[rBranchNumber].getClone();}		  		        		  		
		 }
			
		 		   	
 		//let us update the list of nodes ready to be treated 		 
		 updateReticulateLists(nodeReady, rBranchNumber);
		 updateReticulateLists(nodeReady, lBranchNumber);
		 //need to remove the retic node 
		 networkNodesReadyToBeTreated.remove(nodeReady);
		 //this.printListNodes(networkNodesReadyToBeTreated.listIterator(),true);
		 //this.printListNodes(networkNodesNotReadyToBeTreated.listIterator(),false) ;  
		
	}
	
	 
	public void updateReticulateLists(NetworkNode nodeReady, int branchNumber){
		
		//let us update the list of nodes ready to be treated 		 	    
 		NetworkNode parentNode=nodeReady.getParentByBranch(branchNumber);   				
 		if (parentNode.isReticulation()) {  			
 			networkNodesReadyToBeTreated.add(parentNode);
 			networkNodesNotReadyToBeTreated.remove(parentNode);
 		}else{        			
     		int edgeNumber;    		
     		if (parentNode.childBranchNumbers.get(0)==branchNumber) {
     			edgeNumber=parentNode.childBranchNumbers.get(1);		
     		}else {
     			edgeNumber=parentNode.childBranchNumbers.get(0);    			
     		}     		    
     		if (!tableFMatAugmented[edgeNumber].branchNumbers.isEmpty()) {
     			networkNodesReadyToBeTreated.add(parentNode);
     			networkNodesNotReadyToBeTreated.remove(parentNode);  			
     		} 			   			 			
 		}
					
	}
	
	
	
	public void internalLikelihoodTwoDifferentChildren(NetworkNode nodeReady, FMatrixAugmented FMatChild1, FMatrixAugmented FMatChild2,
			double u, double v, Double [] coalescenceRate) {
		
		
		
        int branchNumber = nodeReady.gammaBranchNumber;
        int branchFirstChild=nodeReady.childBranchNumbers.get(0);
        int branchSecondChild=nodeReady.childBranchNumbers.get(1);
            
        tableFMatAugmented[branchNumber]=new FMatrixAugmented(tableFMatAugmented[branchFirstChild], 
        		tableFMatAugmented[branchSecondChild], branchFirstChild, branchSecondChild, branchNumber);
       

        double heightBranch=nodeReady.getParentByBranch(branchNumber).getHeight()-nodeReady.getHeight();        		
	    tableFMatAugmented[branchNumber].goToTopInternal(u, v, coalescenceRate[branchNumber], heightBranch);    
	    
	    //System.out.println("je passe B -> T sur l'arete "+ nodeReady.gammaBranchNumber);

	  //PRINT F
	    /*
	    if (nodeReady.getLabel().equals("S3")) {
	    	double [] theF=tableFMatAugmented[branchNumber].getF();
	    	System.out.println("HEYYYY " );
	    	System.out.println("Voici la   matrice F associee a ma FMatrixAugmented InternalNode (I am at the top of the branch)" );
	    	for (int k = 0; k < theF.length; k++) { 
	    		System.out.println(theF[k] + " ; ");	        	
	    	}
	    }
	    */
	    //END PRINT F
	
		
	}
		
		
	
	
	public void updateInternalLikTwoDiffChildren(NetworkNode nodeReady) {
		
		int branchNumber = nodeReady.gammaBranchNumber;
		
    	//System.out.println("Clonage   !!!!!!");
    	//System.out.println("Clonons la Fmatrix branchNumber \n");
		// will see later if we need to clone them !!!
		for (int i : tableFMatAugmented[branchNumber].branchNumbers) {   		
		
			if (i!=branchNumber) {
			//System.out.println("voici i " + i + " qui doit etre different de " + branchNumber + "\n");
			tableFMatAugmented[i]=tableFMatAugmented[branchNumber].getClone();}		  		
		  		
		}
		
		
		//check if parent is ready        				
		NetworkNode parentNode=nodeReady.getParentByBranch(branchNumber);
		if (!parentNode.isOrigin()) {
			if (parentNode.isReticulation()) {  			
				//System.out.println(" c est une reticulation !! \n");
				networkNodesReadyToBeTreated.add(parentNode);
				networkNodesNotReadyToBeTreated.remove(parentNode);
			}else {
				int edgeNumber;
				//System.out.println(" ce n'est pas une reticulation !! \n");
				if (parentNode.childBranchNumbers.get(0)==branchNumber) {
					edgeNumber=parentNode.childBranchNumbers.get(1);		
				}else {
					edgeNumber=parentNode.childBranchNumbers.get(0);    			
				}  
			
				if (!tableFMatAugmented[edgeNumber].branchNumbers.isEmpty()) {
					networkNodesReadyToBeTreated.add(parentNode);
					networkNodesNotReadyToBeTreated.remove(parentNode);  			
				} 		
			
			}
		}
	
		 networkNodesReadyToBeTreated.remove(nodeReady);
		 //this.printListNodes(networkNodesReadyToBeTreated.listIterator(),true);
		 //this.printListNodes(networkNodesNotReadyToBeTreated.listIterator(),false) ;  
		
		
	}

	
	//////////////////////////////////////////////	
	
	
	
	public void internalLikelihoodTwins(NetworkNode nodeReady, FMatrixAugmented FMatChild1, double u, double v, Double [] coalescenceRate) {
		// handle case (4*)


        ArrayList <Integer>  branchAboveDescendingLeaves = new ArrayList <Integer>();
        // Calcule la liste des (branches au dessus des) feuilles du noeud nodeReady
        nodeReady.getLeafBranchNumber(branchAboveDescendingLeaves);
        //System.out.printf("voici nodeReady leaves Branch" + branchAboveDescendingLeaves +"\n");
		

        int nMax=0; //will refer to the max number of lineages that go along this edge
        for (int i=0; i<branchAboveDescendingLeaves.size(); i++) {
        	 //System.out.printf("voici la branche " + branchAboveDescendingLeaves.get(i) +"au dessus d'une feuille \n");
        	 // la 1ere (et ici seule) dimension de la Fmatrix de cette branche = #indiv au depart pour cette espece
        	 //System.out.printf("Il y a nb lignees ds cette espece " + tableFMatAugmented[branchAboveDescendingLeaves.get(i)].m_n_MultiDim.get(0) + "\n");
        	 nMax += tableFMatAugmented[branchAboveDescendingLeaves.get(i)].m_n_MultiDim.get(0);
        }

        //System.out.printf("voici nMax" + nMax +"\n");
		
        
        int branchNumber=nodeReady.gammaBranchNumber;
        //System.out.printf("voici le numero de la branche" + branchNumber +"\n");
        int branchFirstChild=nodeReady.childBranchNumbers.get(0);
        int branchSecondChild=nodeReady.childBranchNumbers.get(1);
       
        //FIX IT (have to figure out if we take first or second constructor)
        //tableFMatAugmented[branchNumber]=new FMatrixAugmented(FMatChild1, branchFirstChild, branchSecondChild, branchNumber, nMax);
        tableFMatAugmented[branchNumber]=new FMatrixAugmented(FMatChild1, branchFirstChild, branchSecondChild, branchNumber, nMax);
        
        //DISPLAY
        /*
        double [] theF=tableFMatAugmented[branchNumber].getF();
    	System.out.println("Hello" );
    	System.out.println("Voici la  matrice F associee au haut du blob" );
    	double mySum=0;
    	for (int k = 0; k < theF.length; k++) { 
    		System.out.println(theF[k] + " ; ");
    		mySum += theF[k];
    	}
    	System.out.println(" Voici la valeur de la somme de ma Fmatrix (arete "+branchNumber+") = " + mySum + "\n");
    		*/
    	//END DISPLAY
    	
    	
    	//need to go at the top of the branch
    	 double heightBranch=nodeReady.getParentByBranch(branchNumber).getHeight()-nodeReady.getHeight();        	
    	 //System.out.println("Voici la longueur de cettre branche d interet" + heightBranch + "\n");
    	 tableFMatAugmented[branchNumber].goToTopInternal(u, v, coalescenceRate[branchNumber], heightBranch); 
    	
		
	}
		
		
		
	public void updateInternalLikTwins(NetworkNode nodeReady) {
		
		
		int branchNumber = nodeReady.gammaBranchNumber;
		
    	//System.out.println("Clonage   !!!!!!");
    	//System.out.println("Clonons la Fmatrix branchNumber \n");
		// will see later if we need to clone them !!!
		for (int i : tableFMatAugmented[branchNumber].branchNumbers) {   		
		
			if (i!=branchNumber) {
			//System.out.println("voici i " + i + " qui doit etre different de " + branchNumber + "\n");
			tableFMatAugmented[i]=tableFMatAugmented[branchNumber].getClone();}		  		
		  		
		}
		
		//check if parent is ready        				
		NetworkNode parentNode=nodeReady.getParentByBranch(branchNumber);
		if (!parentNode.isOrigin()) { 
			if (parentNode.isReticulation()) {  			
				System.out.println(" c est une reticulation !! \n");
				networkNodesReadyToBeTreated.add(parentNode);
				networkNodesNotReadyToBeTreated.remove(parentNode);
			}else {
				int edgeNumber;
				System.out.println(" ce n'est pas une reticulation !! \n");
				if (parentNode.childBranchNumbers.get(0)==branchNumber) {
					edgeNumber=parentNode.childBranchNumbers.get(1);		
				}else {
					edgeNumber=parentNode.childBranchNumbers.get(0);    			
				}  
					
				if (!tableFMatAugmented[edgeNumber].branchNumbers.isEmpty()) {
					networkNodesReadyToBeTreated.add(parentNode);
					networkNodesNotReadyToBeTreated.remove(parentNode);  			
				} 		
					
			}
		}
		
		 networkNodesReadyToBeTreated.remove(nodeReady);
		 //this.printListNodes(networkNodesReadyToBeTreated.listIterator(),true);
		 //this.printListNodes(networkNodesNotReadyToBeTreated.listIterator(),false) ;  
	}	
		
		
	///David Bryant 's code

	
	/**
    Determines a non-zero right e-vector for the matrix Q, defined by u,v,coalescenceRate and N.
    The e-vector is normalised so that the entries for each n sum to 1.0

    //TODO: incorporate into code for abstract matrix
    */
   double [][]  findRootProbabilities(int N, double u, double v, double coalescenceRate, boolean dprint) throws Exception {
	   double [][] x;
       QMatrix Qt = new QMatrix(N,u,v,coalescenceRate);
       double [] xcol;
       xcol = Qt.findOrthogonalVector(dprint);
      
       if (dprint) {
           System.out.println("xcol = " +Arrays.toString(xcol));
       }
       
       int index = 1;
       x = new double[N+1][];
       for(int n=1;n<=N;n++) {
           x[n] = new double[n+1];
           double rowsum = 0.0;
           for(int r=0;r<=n;r++) {
               double xcol_index = Math.max(xcol[index], 0.0);
               rowsum += xcol_index;
               x[n][r] = xcol_index;
               index++;
           }
           for(int r=0;r<=n;r++)
               x[n][r] = x[n][r] / rowsum;
       }
       return x;
   } // findRootProbabilities

   

//double doRootLikelihood(NodeData rootData, double u, double v, Double [] coalescenceRate, boolean dprint) throws Exception
double doRootLikelihood(FMatrixAugmented rootFMatrix, double u, double v, double gamma, boolean dprint) throws Exception
   {	   
       //int N=rootData.m_n;
	   // int N = rootData.getSize();
       int N = rootFMatrix.getSizeMultidDim().get(0);
		
		//System.err.println("Coalescent Rate at Root = "+coalescenceRate[rootData.getNr()]);
       // double[][] conditional = findRootProbabilities(N, u, v, coalescenceRate[rootData.getNr()], dprint);
       double[][] conditional = findRootProbabilities(N, u, v, gamma, dprint);
		
       double sum = 0.0;
       for(int n=1;n<=N;n++) {
           for(int r=0;r<=n;r++) {
               //double term =  conditional[n][r] * rootData.getFb().get(n,r);
        	   //System.out.println("Voici la valeur de conditional" + n+ r+ "qui est egale a " + conditional[n][r] + "\n");
        	   double term =  conditional[n][r] * 
        			   rootFMatrix.getF()[rootFMatrix.getLocationMultidDim(Arrays.asList(n),Arrays.asList(r))];       	   
        	   sum += term;
               if (sum<0.0)
                   System.out.println("Numerical problems");
           }
       }
       return sum;
   } // doRootLikelihood
	
	
	//end Bryant's code
		
		
	}
	
	
	
	
	

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
